Для этого обычно используется пакет nvm, но он работает только на linux и macos. Если вы обладатель window, то вы можете использовать пакет nvm-windows.

Оба эти пакета делают одно и то же. Они позволяют переключаться между версиями node. Я буду показывать все на примере nvm, но команды в обоих пакетах будут одинаковые.

Если у вас windows качаем последний релиз из списка релизов и устанавливаем, а если linux или macos то выполняем команду

curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash
В результате установки у вас в консоли команда nvm должна вывести список доступных команд. Для начала нам нужно установить хотя бы одну версию nodejs. Команда

nvm install node
Установит последний релиз node. Но я предпочитаю указывать версию которая мне нужна. Поэтому давайте установим последнюю стабильную версию командой

nvm install 6.9.2
Так как у вас сейчас это единственная установленная версия node на компьютере, то она всегда будет выбираться по умолчанию. А теперь представим, что нам дали проект, который работает на версии 5.9, но на 6 уже не работает. nvm позволяет нам легко установить версию 5.9 и переключится на нее

nvm install 5.9
И теперь если в проекте нам нужно использовать эту версию, мы просто пишем

nvm use 5.9
И это переключит нам версию на 5.9.

Команда nvm list выведет список установленных версий на вашей машине

nvm list
Также nvm хороша тем, что все версии ноды и глобальные пакеты лежат в одной папке и вы всегда знаете где они находятся и откуда их удалить. На macos или linux это будет домашняя директория.

ls ~/.nvm/versions/node/
После того, как мы написали nvm use 6.9, у нас в консоли должны быть доступны node и npm для дальнейшей работы. Проверить это можно с помощью команд

node -v
npm -v